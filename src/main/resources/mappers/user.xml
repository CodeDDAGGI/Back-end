<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.finalProject.Back.repository.UserMapper">
    <insert id="save"
            useGeneratedKeys="true"
            keyProperty="id">
        insert into user
        values (default, #{username} , #{password} , #{name} , #{email} , #{role} , #{nickname} , default , #{oauth}  , #{phoneNumber}  )
    </insert>

    <update id="imgUpdate">
        update user
        set
            img=#{img}
        where
            id = #{id}
    </update>
    <update id="updateFieldValue">
        update user
        set
            <choose>
                <when test="fieldName.equals('username')">
                    username = #{value}
                </when>
                <when test="fieldName.equals('name')">
                    name = #{value}
                </when>
                <when test="fieldName.equals('nickname')">
                    nickname = #{value}
                </when>
                <when test="fieldName.equals('email')">
                    email = #{value}
                </when>
                <when test="fieldName.equals('phoneNumber')">
                    phoneNumber = #{value}
                </when>
                <when test="fieldName.equals('password')">
                    password = #{value}
                </when>
            </choose>
        where
            id = #{id}

    </update>
    <update id="changeValue">
        update
            user
        set
            password = #{password}
        where
            email = #{email}
    </update>
    <select id="findByUsername" resultType="com.finalProject.Back.entity.User">
        select
            *
        from
            user
        where
            username = #{username}
    </select>

    <select id="findById" resultType="com.finalProject.Back.entity.User" >
        SELECT
            *
        FROM
            user
        WHERE
            id = #{id}
    </select>
    <select id="findByOAuth2Name" resultType="com.finalProject.Back.entity.User">
    SELECT
        u.id as user_id,
        u.username,
        u.password,
        u.name,
        u.email,
        u.role,
        u.nickname,
        u.phoneNumber,
        u.img,
        ou.id as oauth2_user_id,
        ou.user_id as ou_user_id,
        ou.email as ou_email,
        ou.oauth2_name,
        ou.provider
    FROM
        user u
    LEFT OUTER JOIN oauth2_user ou ON(ou.user_id = u.id)
    WHERE
        u.username = #{username}
    </select>
    <select id="findByOAuth2Id" resultType="com.finalProject.Back.entity.User">
        SELECT
        u.id,
        u.username,
        u.password,
        u.name,
        u.email,
        u.role,
        u.nickname,
        u.phoneNumber,
        u.img,
        ou.id as oauth2_user_id,
        ou.user_id as ou_user_id,
        ou.email as ou_email,
        ou.oauth2_name,
        ou.provider
        FROM
        user u
        LEFT OUTER JOIN oauth2_user ou ON(ou.user_id = u.id)
        WHERE
        u.id = #{id}
    </select>
    <select id="findUserInfoById" resultType="com.finalProject.Back.dto.response.RespUserInfoDto">
        SELECT
            *
        FROM
            user
        WHERE
            id = #{id}
    </select>
    <select id="findDuplicatedValue" resultType="java.lang.Integer">
        select
            count(*)
        from
            user
        where
            1 = 1
            <choose>
                <when test="fieldName.equals('username')">
                    and username = #{value}
                </when>
                <when test="fieldName.equals('name')">
                    and name = #{value}
                </when>
                <when test="fieldName.equals('email')">
                    and email = #{value}
                </when>
                <when test="fieldName.equals('password')">
                    and password = #{value}
                </when>
                <when test="fieldName.equals('nickname')">
                    and nickname = #{value}
                </when>
                <when test="fieldName.equals('phoneNumber')">
                    and phoneNumber = #{value}
                </when>
            </choose>

    </select>
    <select id="findByEmail" resultType="com.finalProject.Back.entity.User">
        select
            *
        from
            user
        where
            email = #{email}
    </select>
</mapper>