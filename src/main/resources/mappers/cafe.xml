<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finalProject.Back.repository.CafeMapper">

    <resultMap id="CafeDetailResultMap" type="com.finalProject.Back.entity.Cafe.CafeDetail">
        <id property="id" column="cafe_id" />
        <result property="ownerId" column="owner_id" />
        <result property="cafeName" column="cafeName" />
        <result property="address" column="address" />
        <result property="lat" column="lat" />
        <result property="lng" column="lng" />
        <result property="category" column="category" />
        <result property="img" column="banner_img" />
        <result property="reviewCount" column="review_count" />
        <result property="totalRating" column="total_rating" />
        <collection property="reviewCategoryCounts" javaType="java.util.ArrayList" resultMap="ReviewCategoryCountResultMap" />
        <collection property="reviews" javaType="java.util.ArrayList" resultMap="ReviewResultMap" />
        <collection property="reviewCategories" javaType="java.util.ArrayList" resultMap="ReviewCategoryListResultMap" />
        <collection property="noticeList" javaType="java.util.ArrayList" resultMap="NoticeListResultMap" />
    </resultMap>

    <resultMap id="NoticeListResultMap" type="com.finalProject.Back.entity.board.BoardList">
        <id property="id" column="board_id" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="nickname" column="writer_nickname" />
        <result property="likeCount" column="like_count" />
        <result property="viewCount" column="view_count" />
        <result property="writeDate" column="board_write_date" />
    </resultMap>

    <resultMap id="ReviewCategoryCountResultMap" type="com.finalProject.Back.entity.Review.ReviewCategoryCount">
        <id property="categoryId" column="rcc_category_id" />
        <result property="categoryCount" column="category_count" />
        <association property="category" resultMap="CategoryResultMap" />
    </resultMap>

    <resultMap id="CategoryResultMap" type="com.finalProject.Back.entity.Review.Category">
        <id property="id" column="category_id" />
        <result property="categoryName" column="category_name" />
        <result property="categoryNameKor" column="category_name_kor" />
    </resultMap>

    <resultMap id="ReviewCategoryListResultMap" type="com.finalProject.Back.entity.Review.ReviewCategoryList">
        <id property="reviewId" column="review_id" />
        <collection property="categoryId" ofType="java.lang.Long" column="review_id" select="selectCategoriesByReviewId"/>
    </resultMap>

    <resultMap id="ReviewResultMap" type="com.finalProject.Back.entity.Review.Review">
        <id property="id" column="review_id" />
        <result property="cafeId" column="review_cafe_id" />
        <result property="writerId" column="writer_id" />
        <result property="rating" column="rating" />
        <result property="review" column="review" />
        <result property="writeDate" column="write_date" />
        <association property="user" resultMap="UserResultMap" />
    </resultMap>

    <resultMap id="UserResultMap" type="com.finalProject.Back.entity.User">
        <id property="id" column="user_id" />
        <result property="nickname" column="nickname" />
        <result property="img" column="user_img" />
    </resultMap>

    <insert id="save">
        insert into cafe (id , owner_id, cafeName, address, lat, lng, category , img)
        values (default, #{owner_id}, #{cafeName} , #{address}, #{lat} , #{lng} , #{category}, default)
    </insert>

    <update id="modifyBannerImg">
        update
            cafe
        set
            img = #{img}
        where
            id = #{id}
    </update>

    <update id="modifyCafeInfo">
        update
            cafe
        set
            cafeName = #{cafeName},
            address = #{address},
            category = #{category}
        where
            id = #{id}
    </update>

    <select id="findBySearchAndCategory" resultType="com.finalProject.Back.entity.Cafe.Cafe">
        SELECT
            c.id,
            c.cafeName,
            c.address,
            c.category,
            c.lat,
            c.lng,
            c.img,
            count(r.cafe_id) as reviewCount,
            count(cl.cafe_id) as likeCount
        FROM
            cafe c
            LEFT JOIN review r ON c.id = r.cafe_id
            LEFT JOIN cafe_like cl ON c.id = cl.cafe_id
        WHERE
            (c.category = #{category} OR #{category} = '전체')
            AND cafeName LIKE CONCAT('%', #{search}, '%')
        GROUP BY
            c.id
    </select>

    <select id="findByUserId"  resultType="com.finalProject.Back.entity.Cafe.Cafe">
        select
            id,
            cafeName
        from
            cafe
        where
            owner_id = #{id}
    </select>

    <select id="getCafeList" resultType="com.finalProject.Back.dto.response.Cafe.RespAdminCafeListDto">
        select
            *
        from
            cafe
    </select>

    <select id="findByCafeId" resultMap="CafeDetailResultMap">
        with cafe_review_category_count as (
            select
                r.cafe_id,
                category_id,
                count(*) as category_count
            from
                review r
                left outer join review_category rc on(rc.review_id = r.id)
                left outer join category c on(c.id = rc.category_id)
            group by
                r.cafe_id,
                category_id
        ),
        cafe_review_total_rating as (
            select
                cafe_id,
                count(*) as review_count,
                round(avg(rating), 1) as total_rating
            from
                review
            group by
                cafe_id
        ),
        cafe_review_categories as (
            select
                review_id,
                category_id
            from
                review_category
        ),
        board_like_count as (
            select
                bl.board_id,
                count(bl.id) as like_count
            from
                board_like bl
                left outer join board b on(b.id = bl.board_id)
            group by
                bl.board_id
        )
            select
                c.id as cafe_id,
                c.owner_id,
                c.cafeName,
                c.address,
                c.lat,
                c.lng,
                c.category,
                c.img as banner_img,
                rtr.cafe_id as rtr_cafe_id,
                rtr.review_count,
                rtr.total_rating,
                rcc.cafe_id as rcc_cafe_id,
                rcc.category_id as rcc_category_id,
                rcc.category_count,
                ctg.id as category_id,
                ctg.category_name,
                ctg.category_name_kor,
                rev.id as review_id,
                rev.cafe_id as review_cafe_id,
                rev.writer_id,
                rev.rating,
                rev.write_date,
                rev.review,
                u.nickname,
                u.img as user_img,
                crc.review_id,
                crc.category_id,
                b.id as board_id,
                b.title,
                b.content,
                b.write_date as board_write_date,
                us.nickname as writer_nickname,
                b.view_count,
                blc.like_count
            from
                cafe c
                left outer join cafe_review_category_count rcc on (rcc.cafe_id = c.id)
                left outer join cafe_review_total_rating rtr on (rtr.cafe_id = c.id)
                left outer join category ctg on(ctg.id = rcc.category_id)
                left outer join review rev on(rev.cafe_id = c.id)
                left outer join user u on(u.id = rev.writer_id)
                left outer join cafe_review_categories crc on(crc.review_id = rev.id)
                left outer join board b on(b.writer_id = c.owner_id) and (b.board_category = '공지사항')
                left outer join board_like_count blc on(b.id = blc.board_id)
                left outer join user us on (us.id = b.writer_id)
            where
                c.id = #{cafeId}
    </select>

    <select id="selectCategoriesByReviewId" resultType="java.lang.Long">
        select
        category_id
        from
        review_category
        where
        review_id = #{reviewId}
    </select>

</mapper>