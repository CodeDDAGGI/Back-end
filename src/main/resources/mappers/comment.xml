<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.finalProject.Back.repository.CommentMapper">

    <insert id="save">
        insert into comment
        value(default, #{boardId}, #{parentId}, #{content}, #{writerId}, now())
    </insert>

    <update id="modifyById">
        update
            comment
        set
            content = #{content},
            write_date = now()
        where
            id = #{id}
    </update>

    <delete id="deleteById">
        WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                write_date
            FROM
                comment
            WHERE
                id = #{commentId}

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.write_date
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            )

            delete
            from
                comment
            where
                id in(select id from comment_tree)
    </delete>

    <delete id="deleteByBoardId">
        delete
        from
            comment
        where
            board_id = #{boardId}
    </delete>
    <delete id="deleteByUserId">
        WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date) AS (
        SELECT
            id,
            board_id,
            parent_id,
            content,
            writer_id,
            write_date
            FROM
            comment
        WHERE
        writer_id = #{userId}

        UNION ALL

        SELECT
        c.id,
        c.board_id,
        c.parent_id,
        c.content,
        c.writer_id,
        c.write_date
        FROM
        comment c
        JOIN comment_tree ct ON (c.parent_id = ct.id)
        )

        delete
        from
        comment
        where
        id in(select id from comment_tree)
    </delete>

    <select id="findAllByBoardId" resultType="com.finalProject.Back.entity.Comment">
        WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, write_date, level, path) AS (
        SELECT
            id,
            board_id,
            parent_id,
            content,
            writer_id,
            write_date,
            0 AS level,
            cast(lpad(id, 5, 0)  as char(255)) AS path
        FROM
        comment
        WHERE
        parent_id IS NULL
        and board_id = #{boardId}

        UNION ALL

        SELECT
            c.id,
            c.board_id,
            c.parent_id,
            c.content,
            c.writer_id,
            c.write_date,
            ct.level + 1,
            concat(ct.path, ',', lpad(c.id, 5, 0)) as path
        FROM
        comment c
        JOIN comment_tree ct ON (c.parent_id = ct.id)
        WHERE
        c.board_id = #{boardId}
        )

        SELECT
            ct.id,
            ct.board_id as boardId,
            ct.parent_id as parentId,
            ct.content,
            ct.writer_id as writerId,
            ct.write_date as writeDate,
            ct.level,
            u.username,
            u.img,
            ct.path
        FROM
        comment_tree ct
        left outer join user u on(u.id = ct.writer_id)
        WHERE
        ct.board_id = #{boardId}
        ORDER BY
        ct.path
    </select>

    <select id="getCountByBoardId" resultType="java.lang.Integer">
        select
            count(*)
        from
            comment
        where
            board_id = #{boardId}
    </select>

    <select id="findById" resultType="com.finalProject.Back.entity.Comment">
        select
            writer_id as writerId
        from
            comment
        where
            id = #{commentId}
    </select>
    <select id="findCommentById" resultType="com.finalProject.Back.dto.response.RespCommentInfoDto">
        select
            *
        from
            comment
        where
            writer_id = #{id}
    </select>

</mapper>