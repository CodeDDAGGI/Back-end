<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finalProject.Back.repository.ReviewMapper">

    <insert id="save" keyProperty="id" useGeneratedKeys="true">
        insert into review
        values(default, #{cafeId}, #{writerId}, #{rating}, #{review}, now())
    </insert>

    <delete id="delete">
        delete
        from
            review
        where
            id = #{reviewId}
    </delete>

    <delete id="deleteByUserId">
        delete
        from
            review
        where
            writer_id = #{userId}
    </delete>

    <update id="modify">
        update
            review
        set
            rating = #{rating},
            review = #{review},
            write_date = now()
        where
            id = #{id}
    </update>

    <select id="getCountByCafeId" resultType="java.lang.Integer">
        select
            count(*)
        from
            review
        where
            cafe_id = #{cafeId}
    </select>

    <select id="findById" resultType="java.lang.Long">
        select
            writer_id as writerId
        from
            review
        where
            id = #{reviewId}
    </select>

    <select id="getReviewInfoById" resultType="com.finalProject.Back.dto.response.Review.RespReviewInfoDto">
        select
            r.id as id,
            cf.id as cafeId,
            cf.img as img,
            cf.cafeName as cafeName,
            cf.category as category,
            r.writer_id as writerId,
            r.rating as rating,
            r.review as review,
            r.write_date as writeDate
        from
            cafe cf,
            review r
        where
            r.writer_id = #{id} and
            cf.id = r.cafe_id
    </select>
    <select id="reviewRating" resultType="java.lang.Double">
        select
            rating
        from
            review
        where
            id = #{id}
    </select>

    <select id="getRecent" resultType="com.finalProject.Back.entity.Review.Review">
        select
            r.id,
            r.rating,
            r.review,
            r.write_date as writeDate,
            u.name,
            u.nickname,
            c.cafeName
        from
            review r
            left outer join user u on(r.writer_id = u.id)
            left outer join cafe c on(r.cafe_id = c.id)
        order by
            r.write_date desc
        limit
            10
    </select>

</mapper>